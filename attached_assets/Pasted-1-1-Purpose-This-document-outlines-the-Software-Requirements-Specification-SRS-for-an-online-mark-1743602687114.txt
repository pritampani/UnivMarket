1.1 Purpose

This document outlines the Software Requirements Specification (SRS) for an online marketplace for university students to buy and sell unused or unneeded goods. The platform will support optional anonymous listings, bidding, bulk selling, purchase history tracking, and auto-generated bills. It will be implemented as a hybrid solution with a static frontend (HTML, CSS, JavaScript) and a Firebase backend.
1.2 Scope

The marketplace will allow students to list items for sale, browse products, contact sellers, and negotiate prices. The system will support real-time updates using Firebase Firestore, authentication via Firebase Authentication, and serverless functions via Firebase Cloud Functions.

1.3 Intended Audience and Use

University students looking to buy/sell used goods.

Graduating students who want to sell multiple items at once.

Students looking for second-hand deals within their campus community.

University administrations interested in monitoring marketplace usage.
2. Overall Description

2.1 Product Perspective

The application will be a mobile-friendly web platform with a static frontend hosted on Firebase Hosting and a backend using Firestore, Authentication, and Cloud Functions.

2.2 User Classes and Characteristics

Buyer: Can browse listings, contact sellers, bid on products, and make purchases.

Seller: Can list products, set pricing, accept bids, and track sales.

Admin (optional future feature): Monitors transactions and user behavior.

2.3 Operating Environment

Frontend: HTML, CSS, JavaScript, Firebase Hosting.

Backend: Firebase Firestore, Firebase Authentication, Firebase Cloud Functions.

Deployment: Firebase Hosting (static frontend), Firestore for real-time data.

2.4 Constraints

Must be optimized for mobile devices.

Must minimize Firestore read/writes to reduce costs.

Security rules must prevent unauthorized access to user data.

Should work with minimal backend overhead.
3. Specific Requirements

3.1 Functional Requirements

3.1.1 User Authentication

Users sign up/login via Firebase Authentication (Google/Email login).

Users can choose to display their profile or remain anonymous when selling.

3.1.2 Product Listings

Sellers can upload images (stored in Firestore) and videos (linked via Google Drive).

Items categorized into Books, Electronics, Furniture, Clothing, Stationery, etc.

Option to list multiple items at once (bulk selling).

Lazy loading and caching for faster performance.

3.1.3 Contact and Negotiation

Buyers can view seller contact number or be redirected to WhatsApp chat for negotiations.

Buyers can place bids on products instead of direct purchasing.

3.1.4 Purchase History

Users can track their past purchases and sales in their profile.

Filters to search past transactions by date or category.

3.1.5 Auto-Generated Bill

After a purchase, users get a downloadable PDF receipt.

Receipt includes product details, price, seller info, and transaction date.

Option to send a copy via email.

3.2 Non-Functional Requirements

3.2.1 Performance Requirements

Lazy loading and caching to reduce Firebase read/writes.

Service Workers for offline support (PWA integration).

3.2.2 Security Requirements

Firestore Security Rules to prevent unauthorized access.

Role-based access (Buyers, Sellers, Admins).

Encrypted user data storage in Firestore.

3.2.3 Usability Requirements

Mobile-first design for better usability.

Intuitive UI with clean navigation.

Search and filter functionality for faster item discovery.

3.2.4 Scalability Requirements

Optimized queries and indexing for handling high user traffic.

CDN usage for faster content delivery.

4. External Interfaces

4.1 User Interface

Frontend UI built with HTML, CSS, JavaScript.

Responsive layout for mobile-first experience.

4.2 Software Interfaces

Firebase Authentication for login/signup.

Firestore for product listings, user profiles, and transactions.

Firebase Cloud Functions for bidding, bill generation, and notifications.

WhatsApp API integration for contact & negotiations.



